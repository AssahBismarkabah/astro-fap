---
const { frontmatter } = Astro.props;
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC'
  });
}
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>{frontmatter.title}</title>
    <meta name="description" content={frontmatter.description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <style>
      body {
        background: #030d13;
        color: #fff;
        font-family: 'SF Pro', 'SF Pro Display', 'SF Pro Text', 'San Francisco', 'Segoe UI', 'Helvetica Neue', Arial, 'Liberation Sans', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', system-ui, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        font-size: 1.18rem;
      }
      .container {
        max-width: 850px;
        margin: 3.5rem auto 0 auto;
        padding: 2.5rem 1.5rem 5rem 1.5rem;
      }
      .back-link {
        color: #b0b8c1;
        font-size: 1.1rem;
        margin-bottom: 2rem;
        cursor: pointer;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: color 0.2s ease;
      }
      .back-link:hover {
        color: #fff;
      }
      .post-date {
        color: #b0b8c1;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        text-align: left;
      }
      .post-title {
        font-size: 2.7rem;
        font-weight: bold;
        margin-bottom: 0.2rem;
        text-align: left;
        line-height: 1.15;
      }
      .post-author {
        color: #b0b8c1;
        font-size: 1.05rem;
        font-style: italic;
        margin-bottom: 0.7rem;
        text-align: left;
      }
      .post-description {
        color: #b0b8c1;
        font-size: 1.1rem;
        margin-bottom: 2rem;
        text-align: left;
      }
      .prose {
        color: #fff;
        line-height: 1.7;
        text-align: left;
        font-size: 1.22rem;
        max-width: 100%;
      }
      .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
        color: #fff;
        font-weight: bold;
        margin-top: 2.2em;
        margin-bottom: 0.7em;
        line-height: 1.2;
      }
      .prose h1 { font-size: 2.1rem; }
      .prose h2 { font-size: 1.5rem; }
      .prose h3 { font-size: 1.2rem; }
      .prose p, .prose ul, .prose ol, .prose pre, .prose blockquote {
        margin-bottom: 1.3em;
      }
      .prose ul, .prose ol {
        padding-left: 1.5em;
      }
      .prose code {
        background: #222;
        padding: 0.2em 0.4em;
        border-radius: 0.3em;
        font-size: 0.95em;
      }
      .prose pre {
        background: #18181b;
        padding: 1em;
        border-radius: 0.5em;
        overflow-x: auto;
      }
      .prose blockquote {
        border-left: 4px solid #60a5fa;
        margin: 1em 0;
        padding-left: 1em;
        color: #b0b8c1;
        font-style: italic;
      }
      .prose img {
        max-width: 100%;
        border-radius: 0.5em;
        margin: 1em 0;
      }
      .prose a {
        color: #60a5fa;
        text-decoration: underline;
      }
      @font-face {
        font-family: 'SF Pro';
        src: url('/fonts/SF-Pro.ttf') format('truetype');
        font-weight: 400;
        font-style: normal;
      }
      @font-face {
        font-family: 'SF Pro';
        src: url('/fonts/SF-Pro-Display-Bold.otf') format('opentype');
        font-weight: 700;
        font-style: normal;
      }
      @font-face {
        font-family: 'SF Pro';
        src: url('/fonts/SF-Pro-Italic.ttf') format('truetype');
        font-weight: 400;
        font-style: italic;
      }
      @font-face {
        font-family: 'SF Pro';
        src: url('/fonts/SF-Pro-Text-Regular.otf') format('opentype');
        font-weight: 500;
        font-style: normal;
      }
      .loading-emoji {
        position: absolute;
        top: 1.2rem;
        right: 2.2rem;
        font-size: 2.1rem;
        z-index: 20;
        animation: bounce 1.2s infinite;
      }
      @keyframes bounce {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-8px); }
      }
      .content-hidden {
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
      }
      .content-visible {
        opacity: 1;
        visibility: visible;
        transition: opacity 0.3s ease, visibility 0.3s ease;
      }
      .loading-state {
        color: #b0b8c1;
        font-style: italic;
        margin: 2rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      /* Hide empty elements */
      .prose p:empty,
      .prose div:empty {
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div id="loading-indicator" class="loading-emoji">üí≠</div>
      <a href="/blog" class="back-link sticky-header">&larr; Blog</a>
      <div class="post-date">{formatDate(frontmatter.date)}</div>
      <div class="post-title">{frontmatter?.title || 'Loading...'}</div>
      {frontmatter?.author && <div class="post-author">By <i>{frontmatter.author}</i></div>}
      {frontmatter?.description && <div class="post-description">{frontmatter.description}</div>}
      <div id="loading-state" class="loading-state">
        <span>Loading content...</span>
        <span>‚òÅÔ∏è</span>
      </div>
      <div id="article-content" class="prose prose-invert content-hidden">
        {typeof Astro.slots.default !== 'undefined' ? <slot /> : <div>Content loading...</div>}
      </div>
      <script>
        window.addEventListener('DOMContentLoaded', () => {
          const content = document.getElementById('article-content');
          const loadingState = document.getElementById('loading-state');
          const loadingIndicator = document.getElementById('loading-indicator');
          
          const cleanContent = () => {
            if (content) {
              const walker = document.createTreeWalker(
                content,
                NodeFilter.SHOW_TEXT,
                null
              );
              
              let node;
              const nodesToRemove = [];
              
              while (node = walker.nextNode()) {
                if (node.textContent && node.textContent.includes('undefined')) {
                  nodesToRemove.push(node);
                }
              }
              
              nodesToRemove.forEach(node => node.remove());
            }
          };
          
          // Check if content has loaded
          const checkContentLoaded = () => {
            const hasContent = content && content.textContent && content.textContent.trim().length > 0;
            const hasRealContent = content.textContent.trim() !== 'Content loading...';
            return hasContent && hasRealContent;
          };
          
          // Show content when loaded
          const showContent = () => {
            cleanContent(); // Clean any undefined text first
            if (loadingState) loadingState.style.display = 'none';
            if (content) {
              content.classList.remove('content-hidden');
              content.classList.add('content-visible');
            }
            if (loadingIndicator) loadingIndicator.style.display = 'none';
          };
          
          if (checkContentLoaded()) {
            setTimeout(showContent, 200);
          } else {
            let attempts = 0;
            const maxAttempts = 30; // 3 seconds max
            const checkInterval = setInterval(() => {
              attempts++;
              if (checkContentLoaded() || attempts >= maxAttempts) {
                clearInterval(checkInterval);
                showContent();
              }
            }, 100);
          }
        });
      </script>
    </div>
  </body>
</html> 